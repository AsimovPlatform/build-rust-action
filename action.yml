name: 'ASIMOV build rust action'
author: 'ASIMOV by Haltia.AI <support@asimov.so>'
description: 'Action to help automate building rust crates'
inputs:
  target:
    description: 'Target to build.'
    required: true
  artifact-name:
    description: 'Name of the output artifact'
    required: true
  artifact-prefix:
    description: 'Prefix for the output artifact name. Defaults to the repository name.'
    required: false
    default: ${{ github.event.repository.name }}
  package-name:
    description: 'Name of the package. Default is parsed from Cargo.toml.'
    required: false
  package-extension:
    description: "Extension for the package output binary file. Defaults to empty string."
    required: false
  working-directory:
    description: 'Working directory. Defaults to root.'
    required: false
    default: '.'
  checkout:
    description: 'Checkout repository? Defaults to true.'
    required: false
    default: 'true'
  strip:
    description: 'Strip symbols? Defaults to false.'
    required: false
    default: 'false'
  use-zigbuild:
    description: 'Use cargo-zigbuild? Defaults to false.'
    required: false
    default: 'false'
  compress-artifact:
    description: 'Compress artifact? Defaults to true.'
    required: false
    default: 'true'
  upload-artifact:
    description: 'Upload artifact? Defaults to true.'
    required: false
    default: 'true'
outputs:
  artifact-path:
    description: 'Path to the output artifact.'
    value: ${{ steps.finalize.outputs.artifact-path }}
runs:
  using: 'composite'
  steps:
    - name: Install Rust and target
      uses: dtolnay/rust-toolchain@stable
      with:
        target: ${{ inputs.target }}
    - name: Checkout repository
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@v4
      with:
        path: ${{ inputs.working-directory }}
    - name: Obtain package name
      id: jq
      if: ${{ inputs.package-name == '' }}
      shell: bash
      run: |
        PACKAGE_NAME=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[].targets[] | select(.kind[] | contains("bin")) | .name')
        echo "result=$PACKAGE_NAME" >> $GITHUB_OUTPUT
    - name: Prepare environment
      id: globals
      shell: bash
      run: |
        PACKAGE_NAME="${{ inputs.package-name != '' && inputs.package-name || steps.jq.outputs.result }}"
        BINARY_NAME="$PACKAGE_NAME${{ inputs.package-extension != '' && '.' || '' }}${{ inputs.package-extension }}"
        ARTIFACT_NAME="${{ inputs.artifact-prefix }}${{ inputs.artifact-prefix && '-' || '' }}${{ inputs.artifact-name }}"
        IS_TARGET_WINDOWS="${{ contains(inputs.target, 'windows') }}"
        echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
        echo "binary_name=$BINARY_NAME" >> $GITHUB_OUTPUT
        echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
        echo "is_target_windows=$IS_TARGET_WINDOWS" >> $GITHUB_OUTPUT
    - name: Install MinGW
      if: ${{ runner.os != 'windows' && inputs.target == 'x86_64-pc-windows-gnu' }}
      shell: bash
      run: |
        # sudo apt-get update
        sudo apt-get install -yq --no-install-recommends mingw-w64
    - name: Install zig
      if: ${{ inputs.use-zigbuild == 'true' }}
      uses: mlugg/setup-zig@v1
    - name: Install cargo-zigbuild
      if: ${{ inputs.use-zigbuild == 'true' }}
      shell: bash
      run: cargo install --locked cargo-zigbuild
    - name: Build using cargo-zigbuild
      if: ${{ inputs.use-zigbuild == 'true' }}
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: cargo zigbuild --release --target ${{ inputs.target }}
    - name: Build
      if: ${{ inputs.use-zigbuild != 'true' }}
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: cargo build --release --target ${{ inputs.target }}
    - name: Rename artifact
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        mkdir output
        mv target/${{ inputs.target }}/release/${{ steps.globals.outputs.binary_name }} \
          output/${{ steps.globals.outputs.binary_name }}
    - name: Strip artifact
      if: ${{ inputs.strip == 'true' }}
      working-directory: ${{ inputs.working-directory }}/output
      shell: bash
      run: strip ${{ steps.globals.outputs.binary_name }}
    - name: Compress or archive artifact
      id: compress
      if: ${{ inputs.compress-artifact == 'true' }}
      shell: bash
      run: |
        INPUT_PATH="${{ inputs.working-directory }}/output/${{ steps.globals.outputs.binary_name }}"
        OUTPUT_PATH="${{ inputs.working-directory }}/output/${{ steps.globals.outputs.package_name }}"
        if [ "$RUNNER_OS" = "Windows" ]; then
          OUTPUT_PATH="$OUTPUT_PATH.zip"
          7z a -tzip -sdel "$OUTPUT_PATH" "$INPUT_PATH"
        elif [ "${{ steps.globals.outputs.is_target_windows }}" = "true" ]; then
          OUTPUT_PATH="$OUTPUT_PATH.zip"
          zip -m "$OUTPUT_PATH" "$INPUT_PATH"
        else
          OUTPUT_PATH="$OUTPUT_PATH.gz"
          gzip -f "$INPUT_PATH"
        fi
        echo "output-path=$OUTPUT_PATH" >> $GITHUB_OUTPUT
    - name: Upload artifact
      if: ${{ inputs.upload-artifact == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.target }}
        path: ${{ inputs.working-directory }}/output/*
        if-no-files-found: error
    - name: Write outputs
      id: finalize
      shell: bash
      run: |
        if [ "${{ inputs.compress-artifact }}" == "true" ]; then
          echo "artifact-path=${{ steps.compress.outputs.output-path }}" >> $GITHUB_OUTPUT
        else
          echo "artifact-path=${{ steps.globals.outputs.binary_name }}" >> $GITHUB_OUTPUT
        fi
